'use client';
import { useEffect, useRef, useState } from 'react';
import styles from '../f168.module.css';

type QA = { q: string; a: string | string[] };

const faqs: QA[] = [
  { q: 'üìú ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:', a:
    [
      '1Ô∏è‚É£ 1 ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      '2Ô∏è‚É£ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ',
      '3Ô∏è‚É£ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡πÄ‡∏ó‡πà‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      '4Ô∏è‚É£ ‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏™‡∏á‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
      '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚úÖ'
    ],
  },
  { q: '‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?', a: '‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô ‚Äú‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' },
  { q: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ñ‡∏•‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?', a: '‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î ‡∏Å‡∏î ‚Äú‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏¢‚Äù ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏≤ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå' },
  { q: '‡πÄ‡∏Ñ‡∏•‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á?', a: '‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£' },
  { q: '‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?', a: '‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ñ‡∏•‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏ï‡πâ‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' },
  { q: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏´‡∏°?', a: '‡∏°‡∏µ ‡πÇ‡∏õ‡∏£‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ñ‡∏•‡∏°‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤' },
];

export default function Faq() {
  const [openIndex, setOpenIndex] = useState<number | null>(0);

  // reveal ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á
  const wrapRef = useRef<HTMLDivElement | null>(null);
  useEffect(() => {
    const nodes = wrapRef.current?.querySelectorAll<HTMLElement>('[data-faq-item]');
    if (!nodes || nodes.length === 0) return;

    nodes.forEach((el, i) => el.style.setProperty('--i', String(i)));

    const io = new IntersectionObserver(
      entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add(styles.faqVisible);
            io.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.2 }
    );

    nodes.forEach(el => io.observe(el));
    return () => io.disconnect();
  }, []);

  return (
    <section className={`${styles.fqa} mb-[50px] md:mb-0`}>
      <div className={styles.sectionHeading}>
        <h2 className={styles.gradientFont}>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢</h2>
      </div>

      <div className={styles.faqWrap} ref={el => { wrapRef.current = el; }}>
        {faqs.map((item, i) => {
          const isOpen = openIndex === i;
          return (
            <div
              key={i}
              className={`${styles.faqItem} ${isOpen ? styles.open : ''}`}
              data-faq-item
              style={{ ['--i' as any]: i }}
            >
              <button
                type="button"
                className={`${styles.faqButton} ${!isOpen ? styles.collapsed : ''}`}
                aria-expanded={isOpen}
                aria-controls={`faq-body-${i}`}
                onClick={() => setOpenIndex(isOpen ? null : i)}
              >
                {item.q}
              </button>

              <div id={`faq-body-${i}`} className={styles.faqBody}>
                {Array.isArray(item.a) ? (
                  <ul className={styles.faqList}>
                    {item.a.map((line, idx) => (
                      <li key={idx}>{line}</li>
                    ))}
                  </ul>
                ) : (
                  item.a
                )}
              </div>
            </div>
          );
        })}
      </div>
    </section>
  );
}
